" Vundle configuration
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github

" Molokai colorscheme
Bundle 'tomasr/molokai'

" Airline/powerline
Bundle 'bling/vim-airline'
Bundle 'Lokaltog/powerline-fonts'

" Ctrl-P
Bundle 'kien/ctrlp.vim'

" supertab
Bundle 'ervandew/supertab'

" Snippets handling
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'garbas/vim-snipmate'
Bundle 'agoconcept/vim-snippets'

" Comments handling
Bundle 'tomtom/tcomment_vim'

" Match-it
"Bundle 'tmhedberg/matchit'
Bundle 'vim-scripts/matchit.zip'

" Surround
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'

" ack-grep
Bundle 'mileszs/ack.vim'

" ag
Bundle 'rking/ag.vim'

" Multiple cursors
Bundle 'terryma/vim-multiple-cursors'

" Show marks
Bundle 'kshenoy/vim-signature'

" gundo
Bundle 'sjl/gundo.vim'

" netrw
Bundle 'vim-scripts/netrw.vim'

" vinegar
Bundle 'tpope/vim-vinegar'

" Store the session automatically when closing and restore it when opening
"Bundle 'powerman/vim-plugin-autosess'

" tasklist
Bundle 'vim-scripts/TaskList.vim'

" Git support
Bundle 'tpope/vim-fugitive'

" Show differences from git repository
Bundle 'airblade/vim-gitgutter'

" Syntax checking
Bundle 'scrooloose/syntastic'

" Create tags automatically
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-easytags'

" Show ctags tagbar
Bundle 'majutsushi/tagbar'

" Autocomplete C/C++ code
Bundle 'Rip-Rip/clang_complete'

" Autocomplete for Python
if has('python')
  Bundle 'davidhalter/jedi-vim'
endif

" PEP8 for Python
if has('python')
  Bundle 'nvie/vim-flake8'
endif

" Sets up node.js configuration
Bundle 'moll/vim-node'

" Improve javascript syntax highlight
Bundle 'jelera/vim-javascript-syntax'
Bundle 'digitaltoad/vim-jade'

" Javascript capabilities
"Bundle 'marijnh/tern_for_vim'

" rope for vim
if has('python')
  Bundle 'sontek/rope-vim'
endif

" Plugins for handling puppet files
Bundle 'rodjek/vim-puppet'
Bundle 'godlygeek/tabular'

" Navigate tmux and vim panes seamlessly
Bundle 'christoomey/vim-tmux-navigator'

" Trace syntax highlighting groups
Bundle 'gerw/vim-HiLinkTrace'

" Vdebug
Bundle 'joonty/vdebug'

" Github repos of the user 'vim-scripts'
" => can omit the username part
"Bundle 'taglist.vim'
" ...
" Show invisible characters with <F4>
Bundle 'cream-showinvisibles'

" Search and highlight current word
Bundle 'SearchHighlighting'

" Python coverage module
Bundle 'py-coverage'

" WakaTime
if has('python')
  Bundle 'wakatime/vim-wakatime'
endif

" non github repos
"Bundle 'git://git.wincent.com/command-t.git'
" ...

filetype plugin indent on     " required!

" Enable syntax highlighting
syntax on

" Enable UTF-8 encoding
set encoding=utf-8

" Set viminfo to store sessions
set viminfo+=!

" Autoread external changes
set autoread

" gundo configuration
set undodir=~/.vim/tmp/undo/
set undofile
set history=256
set undolevels=256

" Don't save temporary files in current directory
set backupdir=~/.vim/tmp/backup/
set directory=~/.vim/tmp/swap/

" Show line numbers
set number

" Show ruler
set ruler

" Define scroll offset
set scrolloff=2

" Tabs configuration
set showtabline=2

" Set minimum window height
set winminheight=0

" Allow command completion
set wildmenu
set wildmode=list:full

" Allow mouse support
set mouse=a

" Backspace can delete indent, eol and line start
set backspace=indent,eol,start

" Define wrap line text
set nowrap

" Allow breaking lines
set linebreak

" Show break
set showbreak=â€¦

" Number of spaces for tabs
set tabstop=2

" Number of spaces for each step of autoindent
set shiftwidth=2

" Highlight maximum recommended width
if version >= 703
  set colorcolumn=79
endif

" Set indentation for specific file types
autocmd FileType python setlocal shiftwidth=4 tabstop=4
autocmd FileType sh setlocal shiftwidth=4 tabstop=4
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType vim setlocal shiftwidth=2 tabstop=2

" Round indent to multiples of shiftwidth
set shiftround

" Expand tabs to spaces
set expandtab

" Copy indentation of current line when starting a new line
set autoindent

" Do smart autoindenting
set smartindent

" Enable highlighting search results
set hlsearch

" Enable progressive search results
set incsearch

" Ignore case in search patterns
set ignorecase

" Use smart case pattern matching
set smartcase

" Search for tags file recursively in parent directories
set tags=./tags;/

" Avoid delays when pressing ESC
set timeoutlen=1000 ttimeoutlen=0

" Remap leader key
let mapleader = ','

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

""" COLORS AND LOOK'N'FEEL
" Set colorscheme
set t_Co=256
set background=dark
let g:molokai_original = 1
let g:rehash256 = 1
colorscheme molokai

" Set config for airline/powerline
set laststatus=2
let g:airline_powerline_fonts   = 1
let g:airline_theme             = 'molokai'
let g:airline_enable_branch     = 1
let g:airline_enable_syntastic  = 1
let g:airline#extensions#tabline#enabled = 1

if &term =~ '^screen'
  " tmux will send xterm-style keys when its xterm-keys option is on
  execute 'set <xUp>=\e[1;*A'
  execute 'set <xDown>=\e[1;*B'
  execute 'set <xRight>=\e[1;*C'
  execute 'set <xLeft>=\e[1;*D'
endif

" Set supertab to navigate from top to bottom
let g:SuperTabDefaultCompletionType = '<c-n>'
let g:SuperTabContextDefaultCompletionType = '<c-n>'

" Prevent autocompletion after several characters
let g:SuperTabNoCompleteAfter = ['^', ',', ':', "'", '"', ')', '\s']

" Avoid popping up after dot
let g:jedi#popup_on_dot = 0

" Avoid selecting the first item in the completion menu by default
let g:jedi#popup_select_first = 0

" Avoid opening up the preview window
autocmd FileType python setlocal completeopt-=preview

""" HIGHLIGHTING
" Highlight all words like the one under the cursor
" Adapted from http://stackoverflow.com/questions/15999958/can-an-autocmd-be-turned-on-off
let g:toggleHighlight = 0
function! ToggleHighlight(...)
  if a:0 == 1 " Toggle behaviour
    let g:toggleHighlight = 1 - g:toggleHighlight
  endif

  if g:toggleHighlight == 0 " Normal action, highlight
    silent! exe printf('2match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
  else
    " Clear the matches
    silent! exe printf('2match IncSearch //', escape(expand('<cword>'), '/\'))
  endif
endfunction

autocmd WinEnter,CursorMoved * call ToggleHighlight()
autocmd WinLeave * 2match IncSearch //

" Start with automatic highlighting of current word disabled
call ToggleHighlight(1)

" Highlight trailing whitespaces
highlight Error ctermbg=red ctermfg=white guibg=red guifg=white
autocmd ColorScheme * highlight Error ctermbg=red ctermfg=white guibg=red guifg=white
match Error '\s\+$'
autocmd WinEnter,BufWinEnter * match Error /\s\+$/
autocmd InsertEnter * match Error /\s\+\%#\@<!$/
autocmd InsertLeave * match Error /\s\+$/
autocmd WinLeave,BufWinLeave * match Error //

" Set cursorline (only for the active window)
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" Better highlighting of matching brackets and parenthesis
highlight MatchParen cterm=none ctermbg=250 ctermfg=235 gui=none guibg=250 guifg=235

""" NAVIGATION
" Open vimrc easily
nnoremap <leader>v :e ~/git/dotfiles/vim/vimrc<CR>

" Easier split windows navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Navigate split windows and maximize them with Alt-<Up> and Alt-<Down>
nmap <silent> <A-Up> :wincmd k<CR>:wincmd _<CR>
nmap <silent> <A-Down> :wincmd j<CR>:wincmd _<CR>

" Switch buffers
map <S-Tab> :bnext<CR>

" Shortcut for Ack
nnoremap <leader>a :Ack!

" Rope shortcuts
if has('python')
  map <leader>rd :RopeGotoDefinition<CR>
  map <leader>rr :RopeRename<CR>
  map <leader>rev :RopeExtractVariable<CR>
  map <leader>rem :RopeExtractMethod<CR>
endif

" Pycoverage shortcuts
nnoremap <leader>pc :PyCoverageHighlight<CR>
nnoremap <leader>pC :PyCoverageClear<CR>

" shortcuts for git
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gD :diffoff!<CR><c-w>o<CR> " switch back to current file and closes fugitive buffer
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <Leader>gw :!git add . && git commit -m 'WIP' && git push<CR>

" gitgutter shortcuts
nnoremap <leader>hn :GitGutterNextHunk<CR>
nnoremap <leader>hp :GitGutterPrevHunk<CR>

" Make quickfix window always at the bottom and 5 rows height
function SetQuickfixWindow()
  wincmd J
  5wincmd _
endfunction
autocmd FileType qf call SetQuickfixWindow()

""" REMAP some F-keys
" F2: Toggle paste mode to avoid screwing indentation
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" F3: Toggle gundo
nnoremap <F3> :GundoToggle<CR>

" F6: Toggle tasklist
map <F6> :TaskList<CR>

" F8: Toggle Tagbar
nmap <F8> :TagbarToggle<CR>
" Make sure that the tagbar is opened for supported files
"autocmd FileType * nested :call tagbar#autoopen(0)

" F9: Toggle highlighting all matches of current word
map <F9> :call ToggleHighlight(1)<CR>

""" MISC
" PEP8 configuration
let g:flake8_max_line_length=120
let g:flake8_ignore='W391'        " Blank line at end of file

" Call flake8 when saving python files
"autocmd BufWritePost *.py call Flake8()


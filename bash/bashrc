# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# Needed so that vundle works in Ericsson's LMWP
export SHELL=/bin/bash

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
shopt -s lithist
shopt -s cmdhist

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000000
HISTFILESIZE=10000000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] € '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w € '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -F --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# rm alias for improved security
alias rm='rm -i'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8

source ~/.bash_colors

if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
    GIT_PROMPT_THEME=Single_line_Dark
    GIT_PROMPT_ONLY_IN_REPO=0
    source ~/.bash-git-prompt/gitprompt.sh
fi

PS_LINE1="$(FgColor 209)$(date +%Y.%m.%d)-\t$(FgColor 255) $(FgColor 118)[\w]$(FgColor 255)"
PS_LINE2="(\$(if [[ \$? == 0 ]]; then echo \"$(FgColor 10)\342\234\223\"; else echo \"$(FgColor 9)\342\234\227\"; fi)$(FgColor 255)) $(FgColor 135)\u$(FgColor 255)@$(FgColor 222)\h$(FgColor 255)"
GIT_PROMPT_START="\n${PS_LINE1}\n${PS_LINE2}"
GIT_PROMPT_END=" € "

if [ -f /etc/bash_completion.d/git ] && ! shopt -oq posix; then
    source /etc/bash_completion.d/git
fi

GITHUB_TOKEN=$(cat ~/.github_token)

# Needed for tmux to render all colors correctly
# Only set it after ssh'ing to remote hosts
export TERM=screen-256color

# Change directory colors for `ls`
LS_COLORS="$LS_COLORS:di=00;46"

# Update PATH so that it also includes ~/bin/
export PATH=$PATH:~/bin/

# When logging in remote hosts set the window title to the hostname
settitle() {
        printf "\033k@$1\033\\"
}

test -z $TMUX && settitle $(hostname)

# Rename current tmux window to the hostname of the remote host
ssh() {
    if [[ $# == 0 || -z $TMUX ]]; then
        command ssh "$@"
    else
        last_param=${!#}
        tmux rename-window -- "@${last_param}"
        command ssh "$@"
        tmux set-window-option automatic-rename "on" 1> /dev/null
    fi
}

# Rename current tmux window to the sudo'ed command
sudo() {
    if [[ $# == 0 || -z $TMUX ]]; then
        command sudo "$@"
    else
        if [[ $1 = "-"* ]]; then
            name="sudo $@"
        else
            name=$1
        fi
        tmux rename-window -- "${name}"
        command sudo "$@"
        tmux set-window-option automatic-rename "on" 1> /dev/null
    fi
}

# Disable possible timeout
TMOUT=

# Allow googling from command line
google() {
    search=""
    echo "Googling: $@"
    for term in $@; do
        search="$search%20$term"
    done
    xdg-open "http://www.google.com/search?q=$search"
}

# Go to the root git directory for the current project
gitcd() {
    cd $(git rev-parse --show-toplevel)
}

# Support ANSI colors
LESS=-R

